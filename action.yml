# action.yml
name: 'Build Qwak Model'
description: 'Triggers a ML model build in Qwak Cloud.'
branding:
  icon: 'award'
  color: 'orange'

inputs:
  qwak-api-key:
    description: Your Qwak Service API Key. Please store it as a repository secret and just reference it here.
    required: true

  sdk-version:
    description: 'The Qwak-SDK version required to trigger this build, can be 0.5.X or 0.9.X. [Default: latest]'
    required: false

  model-id:
    description: 'Model ID'
    required: true

  model-path:
    description: |
      'Path to the project's directory in the Github runner. By default Qwak searches in the 
      working directory for the `main` directory in the specified path. [Default: "." ].' 
    required: false
    default: '.'

  main-dir-name:
    description: 'Directory name containing the Qwak Model Python file. [Default: main]'
    required: false
    default: 'main'

  param-list:
    description: |
      'A list of key-value pairs representing build parameters, specified in the format NAME=VALUE, separated by comma. 
      These parameters can be used to customize various aspects of the build process, such as the number of iterations, 
      loss function, etc. Once set, the parameters will be saved and can be viewed later.'
    required: false

  env-vars:
    description: |
      'Environment variables for the build, specified in the format NAME=VALUE, separated by comma.
      These variables can be used to set or override environment settings within the build process.
      For example, you can define paths, system configurations, or other environment-specific details.''
    required: false

  tags:
    description: 'One or multiple tags for the model build, separated by comma'
    required: false

  instance:
    description: 'The instance type to train and build the model on. The instance defines the allocated CPU or GPU compute resources as well as memory.'
    required: false
    default: 'small'

  base-image:
    description: |
      'Used for customizing the docker container image built for train, build and deploy. Docker images should 
      be based on qwak images, The entrypoint or cmd of the docker image should not be changed. [Default: None]'
    required: false

  iam-role-arn:
    description: 'Custom IAM Role ARN Qwak should assume in order to access external resources in the build process.'
    required: false

  gpu-compatible:
    description: '[true/false] Whether to build an image that is compatible to be deployd on a GPU. [Default: false]'
    required: false

  environment:
    description: 'The Qwak environment to use. For example, "dev", "staging", or "production".'
    required: false

  logs-as-json:
    description: '[true/false] Output logs as json for easier parsing [Default: true]'
    required: false
    default: 'true'

  from-file:
    description: 'Build model with configuration as code from the specified file. Github Action arguments will overwrite any file configs.'
    required: false

  timeout-after:
    description: 'How many minutes to wait for the build before timing out. [Default: 30]'
    required: false
    default: 30
  
outputs:
  build-id:
    description: 'The ID of the build.'
  build-status:
    description: 'The status of the build once it finished execution or times out.'
  build-metrics:
    description: 'A JSON dictionary of key/value pairs representing build metrics.'


runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9.12'

    - name: Install qwak-sdk
      shell: bash
      run: |
        if [[ -z "${{ inputs.sdk-version }}" ]]; then
          pip3 install qwak-sdk
        else
          VERSION_MAJOR=$(echo "${{ inputs.sdk-version }}" | cut -d. -f2)
          VERSION_MINOR=$(echo "${{ inputs.sdk-version }}" | cut -d. -f3)
          
          if [[ "$VERSION_MAJOR" -eq 5 ]]; then
            pip3 install qwak-sdk==${{ inputs.sdk-version }}
          elif [[ "$VERSION_MAJOR" -eq 9 ]]; then
            pip3 install --extra-index-url https://qwak:A3RX55aNSpE8dCV@qwak.jfrog.io/artifactory/api/pypi/qwak-pypi/simple qwak-sdk==${{ inputs.sdk-version }}
          else
            echo "Error: Unsupported Qwak-SDK version: ${{ inputs.sdk-version }}"; exit 1;
          fi
        fi

    - name: Configure qwak-sdk
      shell: bash
      env:
        QWAK_API_KEY: ${{ inputs.qwak-api-key }}
      run: 'qwak configure --api-key $QWAK_API_KEY'

    - name: Execute build
      shell: bash
      env:
        MODEL_ID: ${{ inputs.model-id }}
        MODEL_PATH: ${{ inputs.model-path }}
        MAIN_DIR_NAME: ${{ inputs.main-dir-name }}
        PARAM_LIST: ${{ inputs.param-list }}
        ENV_VARS: ${{ inputs.env-vars }}
        TAGS: ${{ inputs.tags }}
        INSTANCE: ${{ inputs.instance }}
        BASE_IMAGE: ${{ inputs.base-image }}
        IAM_ROLE_ARN: ${{ inputs.iam-role-arn }}
        GPU_COMPATIBLE: ${{ inputs.gpu-compatible }}
        ENVIRONMENT: ${{ inputs.environment }}
        LOGS_AS_JSON: ${{ inputs.logs-as-json }}
        FROM_FILE: ${{ inputs.from-file }}
        TIMEOUT_AFTER: ${{ inputs.timeout-after }}
      run: python3 ${{ github.action_path }}/register_build.py
      